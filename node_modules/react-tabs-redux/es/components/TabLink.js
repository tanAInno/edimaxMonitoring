var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp2;

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';

export var defaultActiveStyle = {
  fontWeight: 'bold'
};

var TabLink = (_temp2 = _class = function (_Component) {
  _inherits(TabLink, _Component);

  function TabLink() {
    var _temp, _this, _ret;

    _classCallCheck(this, TabLink);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.handleClick = function (e) {
      _this.props.handleSelect(_this.props.to, _this.props.namespace);

      if (_this.props.onClick) {
        _this.props.onClick(e);
      }
    }, _this.handleKeyPress = function (e) {
      if (e.key === ' ' || e.key === 'Enter') {
        e.preventDefault();

        _this.handleClick(e);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  TabLink.prototype.render = function render() {
    var _classNames;

    var _props = this.props,
        to = _props.to,
        handleSelect = _props.handleSelect,
        isActive = _props.isActive,
        namespace = _props.namespace,
        activeStyle = _props.activeStyle,
        disableInlineStyles = _props.disableInlineStyles,
        className = _props.className,
        activeClassName = _props.activeClassName,
        style = _props.style,
        passedProps = _objectWithoutProperties(_props, ['to', 'handleSelect', 'isActive', 'namespace', 'activeStyle', 'disableInlineStyles', 'className', 'activeClassName', 'style']);

    var _className = className || 'tab-link';
    var _activeClassName = activeClassName || 'tab-link-active';
    var _style = _extends({}, style, isActive && (activeStyle || defaultActiveStyle) || {});
    var componentType = this.props.component || 'button';

    return React.createElement(componentType, _extends({
      id: 'tab-' + to,
      role: 'tab',
      'aria-selected': isActive ? 'true' : 'false',
      'aria-controls': 'tabpanel-' + to,
      className: classNames((_classNames = {}, _classNames[_className] = true, _classNames[_activeClassName] = isActive, _classNames)),
      style: !disableInlineStyles && _style || undefined
    }, passedProps, {
      onKeyPress: this.handleKeyPress,
      onClick: this.handleClick
    }), this.props.children);
  };

  return TabLink;
}(Component), _class.displayName = 'TabLink', _temp2);


TabLink.propTypes = process.env.NODE_ENV !== "production" ? {
  to: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
  component: PropTypes.string,
  handleSelect: PropTypes.func,
  onClick: PropTypes.func,
  children: PropTypes.node,
  isActive: PropTypes.bool,
  namespace: PropTypes.string,
  activeStyle: PropTypes.object,
  disableInlineStyles: PropTypes.bool,
  className: PropTypes.string,
  activeClassName: PropTypes.string,
  style: PropTypes.object
} : {};

export default TabLink;